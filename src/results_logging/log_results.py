import json
from typing import List
from langchain.docstore.document import Document
import datetime
import logging
import os

from config import MODEL_NAME, EMB_MODEL_NAME, RESULT_LOG_DIR

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")


def save_results_to_json(
    user_query: str = None,
    retrieved_documents: List[Document] = None,
    prompt_template: str = None,
    generated_answer: str = None,
    embedding_model_name: str = None,
    LLM_name: str = None,
    filename=f"{RESULT_LOG_DIR}/conversation_logs.json",
):
    """
    Save details of a RAG conversation to a json file.

    Args:
    user_query (str): The user's input query.
    retrieved_documents (list[Document]): List of documents retrieved based on the user query.
    prompt_template (str): The template used to generate the prompt for the language model.
    generated_answer (str): The answer generated by the language model.
    RAG_pipeline : (HF pipeline)
    filename (str): The filename where the log will be saved.

    Returns:
    None
    """
    # Ensure the path for the log file exists
    if not os.path.exists(os.path.dirname(filename)):
        os.makedirs(os.path.dirname(filename))

    retrieved_documents_text = [d.page_content for d in retrieved_documents]
    retrieved_documents_metadata = [d.metadata for d in retrieved_documents]

    # Prepare the content to be logged as a dictionary
    log_entry = {
        "user_query": user_query,
        "retrieved_docs_text": retrieved_documents_text,
        "prompt": prompt_template,
        "generated_answer": generated_answer,
        "embedding_model": embedding_model_name,
        "llm": LLM_name,
        "retrieved_doc_metadata": retrieved_documents_metadata,
        "timestamp": datetime.datetime.now().isoformat(),
    }

    # Open the file in append mode and write the dictionary as a JSON object
    with open(filename, "a", encoding="utf-8") as file:
        json.dump(log_entry, file, ensure_ascii=False, indent=4)
        file.write("\n")


def log_chain_results(result, prompt):
    """
    Logs interaction details into a JSON file and returns the original result.
    """
    log_file_path = "llm-open-data-insee/src/logs/conversation_logs.json"

    # Extracting necessary details from the result
    user_query = result["question"]
    generated_answer = result["answer"]
    retrieved_documents = result["context"]
    prompt_template = prompt.template
    embedding_model_name = EMB_MODEL_NAME
    LLM_name = MODEL_NAME

    # Call to save the logs
    logging.info(f"saving outputs in {log_file_path}")
    save_results_to_json(
        user_query,
        retrieved_documents,
        prompt_template,
        generated_answer,
        embedding_model_name,
        LLM_name,
        filename=f"{RESULT_LOG_DIR}/conversation_logs.json",
    )

    return result
